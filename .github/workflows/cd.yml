on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1

permissions:
  id-token: write
  contents: read

jobs:
  tf-apply-infrastructure:
    concurrency:
      group: tf-apply-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ORG_ID }}:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        run: terraform init
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false
  tf-apply-helm:
    runs-on: ubuntu-latest
    needs: [tf-apply-infrastructure]
    defaults:
      run:
        working-directory: ./helm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ORG_ID }}:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - uses: hashicorp/setup-terraform@v3
      - name: Terraform init
        run: terraform init
      - name: Terraform apply
        run: |
          terraform apply -auto-approve -input=false
  docker-push-frontend:
    runs-on: ubuntu-latest
    needs: [tf-apply-helm]
    concurrency:
      group: docker_push
    outputs:
      output_image: ${{ steps.docker_build.outputs.output_image }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: docker_build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG frontend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "output_image=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
  docker-push-backend:
    runs-on: ubuntu-latest
    needs: [tf-apply-helm]
    concurrency:
      group: docker_push
    outputs:
      output_image: ${{ steps.docker_build.outputs.output_image }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        id: docker_build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG backend
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "output_image=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}" >> "$GITHUB_OUTPUT"
  kubernetes-apply:
    runs-on: ubuntu-latest
    needs: [docker-push-frontend, docker-push-backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ORG_ID }}:role/github-role
          role-session-name: github-session
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Kubernetes update config
        run: |
          aws eks --region eu-west-1 update-kubeconfig --name tud-eks-alex
      - name: Kubernetes apply apps
        run: kubectl apply -f apps/v1/
      - name: Kubernetes apply intentions
        run: kubectl apply -f apps/intentions/
      - name: Kubernetes apply auth
        run: kubectl apply -f apps/v2/
      - name: Kubernetes apply proxy
        run: kubectl apply -f proxy/
      - name: Kubernetes apply api gateway
        run: |
          kubectl apply --filename api-gw/consul-api-gateway.yaml --namespace consul && \
          kubectl wait --for=condition=accepted gateway/api-gateway --namespace consul --timeout=90s && \
          kubectl apply --filename api-gw/routes.yaml --namespace consul && \
          kubectl apply --filename api-gw/intentions.yaml --namespace consul
